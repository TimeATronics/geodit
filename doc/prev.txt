/*    glfwSetErrorCallback(glfw_error_callback);
    if (!glfwInit())
        return 1;

#if defined(IMGUI_IMPL_OPENGL_ES2)
    const char* glsl_version = "#version 100";
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
    glfwWindowHint(GLFW_CLIENT_API, GLFW_OPENGL_ES_API);
#else
    // GL 3.0 + GLSL 130
    const char* glsl_version = "#version 130";
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
#endif

	GLFWwindow* window = glfwCreateWindow(1280, 720, "Geodit", nullptr, nullptr);
    if (window == nullptr)
        return 1;
    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls

    ImGui::StyleColorsDark();
    //ImGui::StyleColorsLight();

    // Setup Platform/Renderer backends
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init(glsl_version);

    bool show_demo_window = true;
    bool show_another_window = false;
    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

	int my_image_width = 0;
	int my_image_height = 0;
	GLuint my_image_texture = 0;
	bool ret = LoadTextureFromFile("./doc/sample.tif", &my_image_texture, &my_image_width, &my_image_height);
	IM_ASSERT(ret);

    while (!glfwWindowShouldClose(window)) {

    	glfwPollEvents();
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();
        {
            static float f = 0.0f;
            static int counter = 0;

            ImGui::Begin("Hello, world!");                          // Create a window called "Hello, world!" and append into it.
            ImGui::Text("This is some useful text.");               // Display some text (you can use a format strings too)
            ImGui::Checkbox("Demo Window", &show_demo_window);      // Edit bools storing our window open/close state
            ImGui::Checkbox("Another Window", &show_another_window);
            ImGui::SliderFloat("float", &f, 0.0f, 1.0f);            // Edit 1 float using a slider from 0.0f to 1.0f
            ImGui::ColorEdit3("clear color", (float*)&clear_color); // Edit 3 floats representing a color
            if (ImGui::Button("Button"))                            // Buttons return true when clicked (most widgets return true when edited/activated)
                counter++;
            ImGui::SameLine();
            ImGui::Text("counter = %d", counter);
            ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / io.Framerate, io.Framerate);
            ImGui::End();
        }

			ImGui::Begin("OpenGL Texture Text");
			ImGui::Text("pointer = %x", my_image_texture);
			ImGui::Text("size = %d x %d", my_image_width, my_image_height);
			ImGui::Image((void*)(intptr_t)my_image_texture, ImVec2(my_image_width, my_image_height));
			glViewport(0, 0, my_image_width, my_image_height);

			ImGui::End();
		}

        ImGui::Render();
        int display_w, display_h;
        glfwGetFramebufferSize(window, &display_w, &display_h);
        glViewport(0, 0, display_w, display_h);
        glClearColor(clear_color.x * clear_color.w, clear_color.y * clear_color.w, clear_color.z * clear_color.w, clear_color.w);
        glClear(GL_COLOR_BUFFER_BIT);
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

        glfwSwapBuffers(window);
    }
    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();
    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;*/







    
//    printf("Driver: %s/%s\n", poDataset->GetDriver()->GetDescription(), poDataset->GetDriver()->GetMetadataItem(GDAL_DMD_LONGNAME));
//    printf("Size is %dx%dx%d\n", poDataset->GetRasterXSize(), poDataset->GetRasterYSize(), poDataset->GetRasterCount());
//    if (poDataset->GetProjectionRef() != NULL) {
//        printf("Projection is `%s'\n", poDataset->GetProjectionRef());
//    }









    bool LoadTextureFromFile(const char* filename, GLuint* out_texture, int* out_width, int* out_height) {
    int image_width = 0;
    int image_height = 0;
    //glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);

    TIFFRGBAImage img;
    uint32_t *raster;
    size_t npixels;

    int imgcomponents;
    int hasABGR = 1; // Default

    TIFF *tif;
    char emsg[1024];

    tif = TIFFOpen(filename, "r");
    if (tif == NULL) {
        fprintf(stderr, "tif == NULL\n");
        return false;
    }


    if (TIFFRGBAImageBegin(&img, tif, 0, emsg)) {
        npixels = img.width * img.height;
        raster = (uint32_t *)_TIFFmalloc(npixels * sizeof(uint32_t));
        if (raster != NULL) {
            if (TIFFRGBAImageGet(&img, raster, img.width, img.height) == 0) {
                TIFFError(filename, "%s", emsg);
                return false;
            }
        }

        TIFFRGBAImageEnd(&img);
        fprintf(stderr, "Read image %s (%d x %d)\n", filename, img.width, img.height);
    } else {
        TIFFError(filename, "%s", emsg);
        return false;
    }
    
    image_width = img.width;
    image_height = img.height;

// R8G8B8A8 = 32 bit word with 8 bit components
    if (!hasABGR) {
        //ABGR to RGBA
        int i;
        for (i = 0; i < npixels; i++) {
            unsigned char *cp = (unsigned char *) &raster[i];
            int t;
            printf("%d, %d, %d, %d\n", cp[3], cp[2], cp[1], cp[0]);
            t = cp[3];
            cp[3] = cp[0];
            cp[0] = t;
            int k = cp[2];
            cp[2] = cp[1];
            cp[1] = k;
        }
    }
//  glColorMask(0, 1, 1, 0); // allows only specified color channels to be written


    GLuint image_texture;
    glGenTextures(1, &image_texture);
    glBindTexture(GL_TEXTURE_2D, image_texture);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image_width, image_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, raster);

    *out_texture = image_texture;
    *out_width = image_width;
    *out_height = image_height;
    return true;
}









  /*  static bool sFirstFrame = true;
    if(sFirstFrame) {
      
      sFirstFrame = false;
      
      ImGui::DockBuilderRemoveNode(mainDockSpaceId);
      ImGui::DockBuilderAddNode(mainDockSpaceId, ImGuiDockNodeFlags_None);
      
      ImGuiID dock_id_up;
      ImGuiID dock_id_down;
      
      ImGuiID dock_id_left;
      ImGuiID dock_id_right;
      
      ImGui::DockBuilderSplitNode(mainDockSpaceId, ImGuiDir_Up, 0.5f, &dock_id_up, &dock_id_down);
      
      ImGui::DockBuilderSplitNode(dock_id_up, ImGuiDir_Right, 0.5f, &dock_id_right, &dock_id_left);
      
      ImGui::DockBuilderDockWindow("Down", dock_id_down);
      ImGui::DockBuilderDockWindow("Left", dock_id_left);
      ImGui::DockBuilderDockWindow("Right", dock_id_right);
      
      ImGui::DockBuilderFinish(mainDockSpaceId);
      
    }*/

        ImGui::Begin("Down", NULL, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoTitleBar);
    ImGui::End();





        if(ImGui::BeginMainMenuBar()) {
        if(ImGui::BeginMenu("Menu")) {
            ImGui::MenuItem("Hello!", NULL, false, true);
            ImGui::EndMenu();
        }
        ImGui::EndMainMenuBar();
    }




    /*  if(ImGui::BeginViewportSideBar("StatusBar", viewport, ImGuiDir_Down, height, ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_MenuBar)) {
        if(ImGui::BeginMenuBar()) {
          ImGui::Text("Zoom: ");
          ImGui::SameLine();
          ImGui::Text("Frame: 1/1");
          ImGui::EndMenuBar();
        }
        ImGui::End();
    }
  */ 

   //   ImGuiID mainDockSpaceId = ImGui::DockSpaceOverViewport();







   /********************************************************************************************/
    // Read TIFF file
    const char* filename = "./doc/sample.tif";
/*    int image_width = 0;
    int image_height = 0;
    TIFFRGBAImage img;
    uint32_t *raster;
    size_t npixels;
    TIFF *tif;
    char emsg[1024];

    tif = TIFFOpen(filename, "r");
    if (tif == NULL) {
        fprintf(stderr, "tif == NULL\n");
        exit(EXIT_FAILURE);
    }
    if (TIFFRGBAImageBegin(&img, tif, 0, emsg)) {
        npixels = img.width * img.height;
        raster = (uint32_t *)_TIFFmalloc(npixels * sizeof(uint32_t));
        if (raster != NULL) {
            if (TIFFRGBAImageGet(&img, raster, img.width, img.height) == 0) {
                TIFFError(filename, "%s", emsg);
                exit(EXIT_FAILURE);
            }
        }
        TIFFRGBAImageEnd(&img);
        fprintf(stderr, "Read image %s (%d x %d)\n", filename, img.width, img.height);
    } else {
        TIFFError(filename, "%s", emsg);
        exit(EXIT_FAILURE);
    }
    
    image_width = img.width;
    image_height = img.height;
    TIFFClose(tif);*/

/********************************************************************************************/


/*******************************************************************************************/
    // Pixel buffer to texture
    /*GLuint image_texture;
    glGenTextures(1, &image_texture);
    glBindTexture(GL_TEXTURE_2D, image_texture);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image_width, image_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, raster);*/